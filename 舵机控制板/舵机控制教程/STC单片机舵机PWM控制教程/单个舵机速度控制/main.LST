C51 COMPILER V9.06   MAIN                                                                  06/18/2016 15:35:08 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(5,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*****************************************************************************
   2           ** 文件                        : main.c
   3           ** 作者                        : Zheng23
   4           ** 日期                        :                       
   5           ** 功能                        : 
   6          /*****************************************************************************/
   7          //#include <STC15.h>
   8          //#include"STC89C5xRC.H"
   9          
  10          
  11          //一定要用12M的晶振
  12          //一定要用12M的晶振
  13          //一定要用12M的晶振
  14          //一定要用12M的晶振
  15          //一定要用12M的晶振
  16          //一定要用12M的晶振
  17          
  18          
  19          #include "reg51.h"
  20          
  21          #define bool    bit
  22          #define uint8   unsigned char    
  23          #define uint16  unsigned short int
  24          #define uint32  unsigned long 
  25          
  26          sbit SERVO0=P0^0;                       //控制舵机的PWM输出口
  27          
  28          sbit LED=P2^7;          //调试用
  29          
  30          uint16 ServoPwmDuty=1500;       //PWM脉冲宽度
  31          uint16 ServoPwmDutySet=1500;
  32          double ServoPwmDutyInc;
  33          
  34          bool Flag_20ms = 0;     //20毫秒标识位，在定时中断里面置位
  35          bool ServoPwmDutyHaveChange = 0;        //脉宽有变化标志位
  36          
  37          uint16 ServoTime = 2000;
  38          /***********************************************************
  39          * 名    称： DelayMs(uint16 ms) 
  40          * 功    能： 延时ms毫秒
  41          * 入口参数： ms 毫秒
  42          * 出口参数： 无
  43          * 说    明：                                     
  44          /**********************************************************/
  45          void DelayMs(uint16 ms)
  46          {
  47   1              uint16 i,j;
  48   1              for(i=0;i<85;i++)       //89单片机用85,12系列单片机用800
  49   1                      for(j=0;j<ms;j++);
  50   1      }
  51          /***********************************************************
  52          * 名    称：InitTimer0()
  53          * 功    能：时钟0初始化
  54          * 入口参数：无
  55          * 出口参数：无
C51 COMPILER V9.06   MAIN                                                                  06/18/2016 15:35:08 PAGE 2   

  56          * 说    明：12M晶振，12分频，所以计数器每递增一个数就是1微秒，完全满足舵机控制的精度要求
  57                                  因为定时器是TH0，TL0都要全部计数到0xFF后在计1个数就会产生中断，所以要想产生
  58                                  x毫秒的中断，那么TH0，TL0就应该赋值（0xFFFF-x） 从这个值开始计数产生定时中断                                     
  59          /**********************************************************/ 
  60          void InitTimer0(void)
  61          {
  62   1      //      AUXR &= 0x7F;           //定时器时钟12T模式
  63   1      //      AUXR |= 0x00;           //T0,T1工作在12T
  64   1              TMOD &= 0xF0;           //设置定时器模式
  65   1              TMOD |= 0x01;           //设置定时器模式
  66   1              TL0 = 0x00;                     //设置定时初值
  67   1              TH0 = 0x00;                     //设置定时初值
  68   1              TF0 = 0;                        //清除TF0标志
  69   1              TR0 = 1;                        //定时器0开始计时
  70   1              ET0 = 1;                        //开定时器0中断
  71   1      }
  72          /***********************************************************
  73          * 名    称：Timer0Value(uint16 pwm)  
  74          * 功    能：给定时器0计数器赋值产生定时中断 
  75          * 入口参数：pwm         控制舵机的PWM脉冲宽度值（范围：500~2500）
  76          * 出口参数：无
  77          * 说    明：12M晶振，12分频，所以计数器每递增一个数就是1微秒，完全满足舵机控制的精度要求
  78                                  因为定时器是TH0，TL0都要全部计数到0xFF后在计1个数就会产生中断，所以要想产生
  79                                  pwm毫秒的中断，那么TH0，TL0就应该赋值（0xFFFF-pwm）     从这个值开始计数产生定时中断                                     
  80          /**********************************************************/ 
  81          void Timer0Value(uint16 pwm)
  82          {
  83   1              uint16 value;
  84   1              value=0xffff-pwm;
  85   1              TR0 = 0;
  86   1              TL0=value;                      //16位数据给8位数据赋值默认将16位数据的低八位直接赋给八位数据
  87   1          TH0=value>>8;               //将16位数据右移8位，也就是将高8位移到低八位，再赋值给8位数据   
  88   1              TR0 = 1;
  89   1      }
  90          /***********************************************************
  91          * 名    称： ServoPwmDutyCompare()
  92          * 功    能： 脉宽变化比较及速度控制
  93          * 入口参数： 无
  94          * 出口参数： 无
  95          * 说    明：                                     
  96          /**********************************************************/
  97          void ServoPwmDutyCompare()
  98          {
  99   1      
 100   1              static uint16 ServoPwmDutyIncTimes;     //需要递增的次数
 101   1              static bool ServoRunning = 0;   //舵机正在以指定速度运动到指定的脉宽对应的位置
 102   1              if(ServoRunning == 0 && ServoPwmDutyHaveChange)//停止运动并且脉宽发生变化时才进行计算
 103   1              {
 104   2                      ServoPwmDutyHaveChange = 0;
 105   2                      ServoPwmDutyIncTimes = ServoTime/20;    
 106   2                      if(ServoPwmDutySet > ServoPwmDuty)
 107   2                      {
 108   3                              ServoPwmDutyInc = ServoPwmDutySet - ServoPwmDuty;
 109   3                              ServoPwmDutyInc = -ServoPwmDutyInc;
 110   3                      }
 111   2                      else
 112   2                      {
 113   3                              ServoPwmDutyInc = ServoPwmDuty - ServoPwmDutySet;
 114   3                              
 115   3                      }
 116   2                      ServoPwmDutyInc /= ServoPwmDutyIncTimes;//每次递增的脉宽
 117   2                      ServoRunning = 1;       //舵机开始动作
C51 COMPILER V9.06   MAIN                                                                  06/18/2016 15:35:08 PAGE 3   

 118   2              }
 119   1              if(ServoRunning)
 120   1              {
 121   2                      ServoPwmDutyIncTimes--;
 122   2                      if(ServoPwmDutyIncTimes == 0)
 123   2                      {               //最后一次递增就直接将设定值赋给当前值
 124   3                              ServoPwmDuty = ServoPwmDutySet;
 125   3                              ServoRunning = 0;       //到达设定位置，舵机停止运动
 126   3                      }
 127   2                      else
 128   2                      {
 129   3                              ServoPwmDuty = ServoPwmDutySet + 
 130   3                                      (signed short int)(ServoPwmDutyInc * ServoPwmDutyIncTimes);
 131   3                      }
 132   2              }
 133   1      }
 134          /***********************************************************
 135          * 名    称： main()
 136          * 功    能： 入口函数
 137          * 入口参数： 无
 138          * 出口参数： 无
 139          * 说    明：                                     
 140          /**********************************************************/ 
 141          void main(void)
 142          {
 143   1              uint16 Time;
 144   1              InitTimer0();   //定时器0初始化
 145   1              EA = 1;                 //开总中断
 146   1              while(1)                //大循环
 147   1              {       
 148   2                      if(Flag_20ms)
 149   2                      {
 150   3                              Time++;
 151   3                              Flag_20ms = 0;
 152   3                              ServoPwmDutyCompare();
 153   3                      }
 154   2                      if(Time > 110)
 155   2                      {
 156   3                              Time = 0;
 157   3                              LED = ~LED;
 158   3                              if(ServoPwmDutySet == 500)
 159   3                              {
 160   4                                      ServoPwmDutySet = 2500;                 //脉冲宽度在2500微秒，对应90°
 161   4                              }
 162   3                              else
 163   3                              {
 164   4                                      ServoPwmDutySet = 500;                  //脉冲宽度在500微秒，对应-90°
 165   4                              }
 166   3                              ServoPwmDutyHaveChange = 1;
 167   3                      }
 168   2              }
 169   1      }
 170          
 171          /***********************************************************
 172          * 名    称： Timer0_isr() interrupt 1 using 1
 173          * 功    能： 时钟0中断处理
 174          * 入口参数： 无
 175          * 出口参数： 无
 176          * 说    明：                                     
 177          /**********************************************************/ 
 178          void Timer0_isr(void) interrupt 1 using 1
 179          {
C51 COMPILER V9.06   MAIN                                                                  06/18/2016 15:35:08 PAGE 4   

 180   1              static uint16 i = 1;    //静态变量：每次调用函数时保持上一次所赋的值，
 181   1                                                              //跟全局变量类似，不同是它只能用于此函数内部
 182   1              switch(i)
 183   1              {
 184   2                      case 1:
 185   2                              SERVO0 = 1;     //PWM控制脚高电平
 186   2                              //给定时器0赋值，计数Pwm0Duty个脉冲后产生中断，下次中断会进入下一个case语句
 187   2                              Timer0Value(ServoPwmDuty);
 188   2                              Flag_20ms = 1;  
 189   2                              break;
 190   2                      case 2:
 191   2                              SERVO0 = 0;     //PWM控制脚低电平
 192   2                              //高脉冲结束后剩下的时间(20000-Pwm0Duty)全是低电平了，Pwm0Duty + (20000-Pwm0Duty) = 20000个脉冲正好为一
             -个周期20毫秒 
 193   2                              Timer0Value(20000-ServoPwmDuty);
 194   2                              i = 0;  
 195   2                              break;   
 196   2              }
 197   1              i++;
 198   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    419    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
